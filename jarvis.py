import getpass
import os
import subprocess
import time
from langchain.agents import Tool, initialize_agent
from langchain_core.messages import HumanMessage, SystemMessage
from langchain.chat_models import init_chat_model
from langchain.agents.agent_types import AgentType
try:
    # load environment variables from .env file (requires `python-dotenv`)
    from dotenv import load_dotenv
    print("Loading environment variables from .env file...")

    load_dotenv()
except ImportError:
    pass
# üîê Chave da API Google Gemini
if not os.environ.get("GOOGLE_API_KEY"):
    os.environ["GOOGLE_API_KEY"] = getpass.getpass("Enter API key for Google Gemini: ")

# ‚öôÔ∏è Inicializa o modelo Gemini
llm = init_chat_model("gemini-2.0-flash", model_provider="google_genai")

# üîß Ferramenta de pesquisa simulada
def pesquisar_web(query: str) -> str:
    print(f"[PESQUISA] Simulando busca por: {query}")
    return f"Resultado simulado para: {query}"

# üéµ Ferramenta para tocar m√∫sica no YouTube com Brave e Selenium
import subprocess
import time
import os
import shutil
import platform
import sys
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from shutil import which

import getpass
import os
import subprocess
import time
from langchain.agents import Tool, initialize_agent
from langchain_core.messages import HumanMessage, SystemMessage
from langchain.chat_models import init_chat_model
from langchain.agents.agent_types import AgentType

# üîê Chave da API Google Gemini
if not os.environ.get("GOOGLE_API_KEY"):
    os.environ["GOOGLE_API_KEY"] = getpass.getpass("Enter API key for Google Gemini: ")

# ‚öôÔ∏è Inicializa o modelo Gemini
llm = init_chat_model("gemini-2.0-flash", model_provider="google_genai")

# üîß Ferramenta de pesquisa simulada
def pesquisar_web(query: str) -> str:
    print(f"[PESQUISA] Simulando busca por: {query}")
    return f"Resultado simulado para: {query}"

# üéµ Ferramenta para tocar m√∫sica no YouTube com Selenium (usando Google Chrome)
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from shutil import which

# Tenta importar pyautogui para automa√ß√£o de cliques
try:
    import pyautogui
    PYAUTOGUI_AVAILABLE = True
except ImportError:
    PYAUTOGUI_AVAILABLE = False
    print("[AVISO] PyAutoGUI n√£o est√° instalado. Alguns recursos avan√ßados de clique n√£o estar√£o dispon√≠veis.")
    print("Instale com: pip install pyautogui")


def tocar_musica(query: str):
    # Formata a URL para busca de v√≠deos no YouTube
    url_search = f"https://www.youtube.com/results?search_query={query.replace(' ', '+')}&sp=EgIQAQ%253D%253D"
    
    print(f"[M√öSICA] Tentando tocar: {query}")
    
    driver = None 
    # try:
    #     print("[INFO] Tentando abrir YouTube com Google Chrome e clicar no primeiro v√≠deo...")
    #     service = Service("/usr/local/bin/chromedriver-linux64/chromedriver")

    #     # Configura√ß√µes para o Google Chrome
    #     options = Options()
    #     options.add_argument("--user-data-dir=/home/kaizen/chrome-selenium-profile")
    #     options.add_argument("--profile-directory=Default")  # ou "Profile 1", "Profile 2", etc
    #     options.add_experimental_option("excludeSwitches", ["enable-automation"])
    #     options.add_experimental_option('useAutomationExtension', False)
    #     # Outras flags recomendadas
    #     options.add_argument("--no-sandbox")
    #     options.add_argument("--disable-dev-shm-usage")
    #     # --- Definir o binary_location para o Google Chrome ---
    #     # Tenta encontrar o google-chrome no PATH ou no caminho comum
    #     chrome_executable = "/usr/bin/brave-browser"
    #     if not chrome_executable:
    #         if not os.path.exists(chrome_executable):
    #             print(f"[ERRO] Execut√°vel do Google Chrome n√£o encontrado em {chrome_executable} e n√£o est√° no PATH.")
    #             return f"Erro: Google Chrome n√£o encontrado. N√£o foi poss√≠vel tocar '{query}'."

    #     options.binary_location = chrome_executable
    #     print(f"[INFO] Definindo binary_location para: {chrome_executable}")

    #     # Inicializa o Chrome WebDriver
    #     try:
    #         # Use Service() se chromedriver estiver no PATH
    #         # Se n√£o estiver, especifique o caminho: Service(executable_path="/caminho/do/seu/chromedriver")
    #         driver = webdriver.Chrome(service=service, options=options)
    #         print(f"[‚úÖ] WebDriver (Google Chrome) iniciado com sucesso")
    #     except Exception as e:
    #         print(f"[ERRO] N√£o foi poss√≠vel iniciar o WebDriver: {str(e)[:200]}")
    #         raise Exception(f"Falha ao iniciar WebDriver: {str(e)[:100]}")
        
    #     # Abre a p√°gina de busca do YouTube
    #     driver.get(url_search)
    #     print("[INFO] P√°gina de busca do YouTube aberta")
        
    #     # Espera at√© 10 segundos pelos resultados da busca carregarem
    #     wait = WebDriverWait(driver, 10)
        
    #     # Agora vamos focar especificamente no seletor para o elemento id="video-title"
    #     try:
    #         print("[INFO] Aguardando e procurando pelo elemento com id='video-title'...")
            
    #         # Primeiro, esperamos at√© que os resultados carreguem
    #         wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "ytd-video-renderer")))
            
    #         # Especificamente procuramos pelo link com id="video-title"
    #         video_title_selector = "#video-title"
    #         video_element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, video_title_selector)))
            
    #         # Rola a p√°gina at√© o elemento
    #         driver.execute_script("arguments[0].scrollIntoView()", video_element)
    #         time.sleep(1)
            
    #         # Tenta clicar com JavaScript (mais confi√°vel)
    #         driver.execute_script("arguments[0].click();", video_element)
            
    #         # Verifica se o clique funcionou (se estamos na mesma p√°gina, tenta clique normal)
    #         if driver.current_url == url_search:
    #             video_element.click()
                
    #         print(f"[‚úÖ] Clicou no v√≠deo com sucesso usando seletor {video_title_selector}!")
            
    #         # Espera um pouco para o v√≠deo carregar
    #         time.sleep(3)
                
    #         # Agora tenta garantir que o v√≠deo est√° sendo reproduzido
    #         # clicando no bot√£o de play, se necess√°rio
    #         try:
    #             # Seletores para o bot√£o de play no YouTube
    #             play_button_selectors = [
    #                 ".ytp-play-button", # Bot√£o padr√£o de play/pause
    #                 ".ytp-large-play-button", # Bot√£o grande de play que aparece quando v√≠deo est√° parado
    #                 "#movie_player", # Clica no player diretamente
    #                 ".html5-video-container" # Container do v√≠deo
    #             ]
                
    #             for play_selector in play_button_selectors:
    #                 try:
    #                     print(f"[INFO] Tentando clicar no bot√£o play com seletor: {play_selector}")
    #                     play_button = WebDriverWait(driver, 5).until(
    #                         EC.element_to_be_clickable((By.CSS_SELECTOR, play_selector))
    #                     )
    #                     driver.execute_script("arguments[0].click();", play_button)
    #                     print(f"[‚úÖ] Clicou no bot√£o de play!")
    #                     break
    #                 except Exception as e:
    #                     print(f"[INFO] N√£o conseguiu clicar no bot√£o com seletor {play_selector}")
    #                     continue
    #         except Exception as e:
    #             print(f"[INFO] Erro ao tentar clicar no play: {str(e)[:100]}")
    #             print("[INFO] O v√≠deo pode iniciar automaticamente ou pode ser necess√°rio clicar manualmente")
            
    #         # Importante: N√ÉO fechamos o driver para que a m√∫sica continue tocando
    #         print("[‚úÖ] Mantendo o navegador aberto para continuar a reprodu√ß√£o")
            
    #         # A p√°gina do v√≠deo foi aberta e provavelmente est√° tocando
    #         return f"M√∫sica '{query}' est√° sendo reproduzida no YouTube! O navegador permanecer√° aberto para continuar a reprodu√ß√£o."
    #     except Exception as e:
    #         print(f"[INFO] N√£o foi poss√≠vel clicar no elemento com id='video-title': {str(e)[:100]}")
        
    #     # Se chegou aqui e n√£o conseguiu clicar no v√≠deo, fecha o driver e tenta com subprocess
    #     print("[ALERTA] N√£o conseguiu clicar no v√≠deo. Fechando WebDriver.")
    #     try:
    #         driver.quit()
    #     except Exception as e:
    #         print(f"[INFO] Erro ao fechar o driver: {str(e)[:100]}")
    
    # except Exception as e: # Este catch √© para erros do Selenium
    #     print(f"[ERRO] Erro ao usar Selenium: {str(e)[:150]}")
    #     print("[INFO] Tentando m√©todo alternativo com subprocess...")
    
    # --- Parte do subprocess (m√©todo de backup, agora usando Google Chrome) ---
    chrome_subprocess_path = shutil.which("google-chrome")
    if not chrome_subprocess_path:
        chrome_subprocess_path = "/usr/bin/google-chrome" 
        if not os.path.exists(chrome_subprocess_path):
            print(f"[ERRO] Execut√°vel do Google Chrome para subprocess n√£o encontrado em {chrome_subprocess_path} e n√£o est√° no PATH.")
            return f"N√£o foi poss√≠vel abrir um navegador para reproduzir '{query}'. Verifique se o Google Chrome est√° instalado."


    try:
        # Abre o Google Chrome diretamente com a URL de busca
        print(f"[INFO] Tentando abrir {url_search} com {chrome_subprocess_path} via subprocess...")
        process = subprocess.Popen([chrome_subprocess_path, url_search])
        print(f"[‚úÖ] Sucesso! URL aberta com {chrome_subprocess_path}")
        
        # Pausamos o script por alguns segundos para a p√°gina carregar completamente
        time.sleep(5)
        
        # Tenta usar o PyAutoGUI para clicar no primeiro resultado se dispon√≠vel
        if PYAUTOGUI_AVAILABLE:
            try:
                print("[INFO] Tentando usar PyAutoGUI para clicar no primeiro resultado...")
                
                script_dir = os.path.dirname(os.path.abspath(__file__))
                ref_image = os.path.join(script_dir, "youtube_video_title.png")
                
                if os.path.exists(ref_image):
                    try:
                        print("[INFO] Buscando refer√™ncia visual do t√≠tulo do v√≠deo...")
                        location = pyautogui.locateOnScreen(ref_image, confidence=0.7)
                        if location:
                            center_x, center_y = pyautogui.center(location)
                            pyautogui.click(center_x, center_y)
                            print(f"[‚úÖ] Clicou no primeiro resultado usando refer√™ncia visual!")
                            time.sleep(2)
                            return f"M√∫sica '{query}' est√° sendo reproduzida no YouTube!"
                    except Exception as e:
                        print(f"[INFO] N√£o conseguiu encontrar refer√™ncia visual: {str(e)[:100]}")
                
                print("[INFO] Tentando clicar em posi√ß√£o estimada para o primeiro resultado...")
                pyautogui.click(x=500, y=400)  
                time.sleep(0.5)
                # pyautogui.moveTo(x=500, y=450, duration=0.5)
                pyautogui.click()
                print("[‚úÖ] Tentou clicar no primeiro resultado usando posi√ß√£o estimada")
                
                time.sleep(3)
                
                return f"M√∫sica '{query}' est√° sendo reproduzida no YouTube (via clique autom√°tico)!"
            except Exception as e:
                print(f"[INFO] Erro ao tentar clicar com PyAutoGUI: {str(e)[:100]}")
        
        print("[INFO] Navegador aberto, mas clique manual necess√°rio")
        return f"M√∫sica '{query}' est√° sendo carregada no YouTube. Voc√™ precisa clicar no v√≠deo para reproduzir."
    except FileNotFoundError:
        print(f"[ERRO] Navegador {chrome_subprocess_path} n√£o foi encontrado no sistema")
    except Exception as e:
        print(f"[ERRO] Erro ao tentar abrir {chrome_subprocess_path} com {url_search}: {e}")
            
    try:
        print("[INFO] Tentando abrir com o navegador padr√£o do sistema...")
        import webbrowser
        url_final = f"https://www.youtube.com/results?search_query={query.replace(' ', '+')}"
        webbrowser.open(url_final)
        time.sleep(1)
        return f"M√∫sica '{query}' est√° sendo carregada no navegador padr√£o. Clique no v√≠deo para reproduzir se necess√°rio."
    except Exception as e:
        print(f"[ERRO] Erro ao tentar abrir o navegador padr√£o: {e}")
    
    return f"N√£o foi poss√≠vel abrir um navegador para reproduzir '{query}'. Verifique se o Google Chrome est√° instalado."

# üéôÔ∏è M√≥dulo de reconhecimento de voz
import speech_recognition as sr
import re

def escutar_comando():
    """Escuta o microfone e retorna o texto reconhecido"""
    recognizer = sr.Recognizer()
    
    # Ajusta o recognizer para o ru√≠do ambiente
    with sr.Microphone() as source:
        print("\nüîä Ajustando para ru√≠do ambiente...")
        recognizer.adjust_for_ambient_noise(source, duration=1)
        print("üéß Ouvindo...")
        
        try:
            # Removido timeout para escutar indefinidamente
            audio = recognizer.listen(source, phrase_time_limit=5)
            print("üîç Reconhecendo...")
            
            # Usando o Google Speech Recognition
            texto = recognizer.recognize_google(audio, language="pt-BR")
            print(f"üó£Ô∏è Voc√™ disse: {texto}")
            return texto.lower()
        except sr.WaitTimeoutError:
            return ""
        except sr.UnknownValueError:
            print("‚ùì N√£o entendi o que voc√™ disse")
            return ""
        except sr.RequestError as e:
            print(f"‚ùå Erro na requisi√ß√£o ao servi√ßo de reconhecimento: {e}")
            return ""

def detectar_jarvis(texto):
    """Verifica se o texto cont√©m a palavra de ativa√ß√£o 'Jarvis'"""
    return bool(re.search(r"\bjarvis\b", texto, re.IGNORECASE))

def extrair_comando_musica(texto):
    """Extrai o comando de m√∫sica do texto"""
    # Padr√µes comuns para pedidos de m√∫sica
    padrao_tocar = r"(tocar|ouvir|escutar|coloca|coloque|p√µe|bota)\s+(a m√∫sica|m√∫sica|a can√ß√£o|can√ß√£o|o som|som)?\s*(.+)"
    
    # Procura padr√µes de pedido de m√∫sica no texto
    match = re.search(padrao_tocar, texto, re.IGNORECASE)
    if match:
        return match.group(3)
    
    # Se n√£o encontrou padr√µes espec√≠ficos, remove apenas o "jarvis" do texto
    return re.sub(r"\bjarvis\b", "", texto, flags=re.IGNORECASE).strip()

def processar_comando_voz():
    """Processa o comando de voz e retorna o texto processado"""
    texto = escutar_comando()
    
    if not texto:
        return ""
        
    if detectar_jarvis(texto):
        print("ü§ñ Jarvis ativado!")
        comando_musica = extrair_comando_musica(texto)
        
        if comando_musica:
            print(f"üéµ Comando de m√∫sica: '{comando_musica}'")
            return comando_musica
    
    return ""

# Configura√ß√£o do agente
tools = [
    Tool(
        name="Pesquisa na Web",
        func=pesquisar_web,
        description="Ferramenta para pesquisar na web por informa√ß√µes"
    ),
    Tool(
        name="Reproduzir M√∫sica",
        func=tocar_musica,
        description="Ferramenta para tocar m√∫sica no YouTube"
    )
]

# Inicializa√ß√£o do agente
agent = initialize_agent(
    tools, 
    llm, 
    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True,
    handle_parsing_errors=True,
    system_message=SystemMessage(content="""Voc√™ √© o Jarvis, um assistente de IA avan√ßado.
    Seu objetivo √© ajudar o usu√°rio com suas tarefas di√°rias, responder perguntas e entretenimento.
    Voc√™ tem acesso a ferramentas para pesquisar na web e reproduzir m√∫sicas no YouTube.""")
)

# üöÄ Execu√ß√£o principal
def modo_voz():
    print("\nüé§ Modo de reconhecimento de voz ativado! Diga 'Jarvis' seguido do seu pedido de m√∫sica.")
    print("üõë Pressione Ctrl+C para sair")
    
    try:
        while True:
            comando = processar_comando_voz()
            if comando:
                print(f"üéµ Reproduzindo: {comando}")
                tocar_musica(comando)
    except KeyboardInterrupt:
        print("\nüëã Encerrando o modo de voz...")

def modo_texto():
    print("\n‚å®Ô∏è Modo de texto ativado! Digite seus comandos:")
    print("üõë Pressione Ctrl+C para sair")
    
    try:
        while True:
            comando = input("\nEu: ")
            resposta = agent.run(comando)
            print(f"\nüì¢ Resposta do assistente: {resposta}")
    except KeyboardInterrupt:
        print("\nüëã Encerrando o modo de texto...")

# Interface de linha de comando simples
if __name__ == "__main__":
    print("\nü§ñ JARVIS - Assistente Pessoal")
    print("1 - Modo de voz (diga 'Jarvis' seguido do pedido de m√∫sica)")
    print("2 - Modo de texto (digite comandos)")
    
    escolha = input("Escolha uma op√ß√£o (1/2): ")
    
    if escolha == "1":
        modo_voz()
    else:
        modo_texto()
    print(f"\nüì¢ Resposta do assistente: {resposta}")