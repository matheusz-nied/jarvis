import getpass
import os
import subprocess
import time
from langchain.agents import Tool, initialize_agent
from langchain_core.messages import HumanMessage, SystemMessage
from langchain.chat_models import init_chat_model
from langchain.agents.agent_types import AgentType

from test_interface import JarvisInterface
try:
    # load environment variables from .env file (requires `python-dotenv`)
    from dotenv import load_dotenv
    print("Loading environment variables from .env file...")

    load_dotenv()
except ImportError:
    pass
# üîê Chave da API Google Gemini
if not os.environ.get("GOOGLE_API_KEY"):
    os.environ["GOOGLE_API_KEY"] = getpass.getpass("Enter API key for Google Gemini: ")

# ‚öôÔ∏è Inicializa o modelo Gemini
llm = init_chat_model("gemini-2.0-flash", model_provider="google_genai")

# üîß Ferramenta de pesquisa simulada
def pesquisar_web(query: str) -> str:
    print(f"[PESQUISA] Simulando busca por: {query}")
    return f"Resultado simulado para: {query}"

# üéµ Ferramenta para tocar m√∫sica no YouTube com Brave e Selenium
import subprocess
import time
import os
import shutil
import platform
import sys
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from shutil import which

import getpass
import os
import subprocess
import time
from langchain.agents import Tool, initialize_agent
from langchain_core.messages import HumanMessage, SystemMessage
from langchain.chat_models import init_chat_model
from langchain.agents.agent_types import AgentType

# üîê Chave da API Google Gemini
if not os.environ.get("GOOGLE_API_KEY"):
    os.environ["GOOGLE_API_KEY"] = getpass.getpass("Enter API key for Google Gemini: ")

# ‚öôÔ∏è Inicializa o modelo Gemini
llm = init_chat_model("gemini-2.0-flash", model_provider="google_genai")

# üîß Ferramenta de pesquisa simulada
def pesquisar_web(query: str) -> str:
    print(f"[PESQUISA] Simulando busca por: {query}")
    return f"Resultado simulado para: {query}"

# üéµ Ferramenta para tocar m√∫sica no YouTube com Selenium (usando Google Chrome)
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from shutil import which
import signal  # Para enviar sinais de termina√ß√£o a processos

# Tenta importar pyautogui para automa√ß√£o de cliques
try:
    import pyautogui
    PYAUTOGUI_AVAILABLE = True
except ImportError:
    PYAUTOGUI_AVAILABLE = False
    print("[AVISO] PyAutoGUI n√£o est√° instalado. Alguns recursos avan√ßados de clique n√£o estar√£o dispon√≠veis.")
    print("Instale com: pip install pyautogui")


# Vari√°vel global para armazenar o processo do navegador atual
chrome_process = None

def tocar_musica(query: str):
    # Formata a URL para busca de v√≠deos no YouTube
    url_search = f"https://www.youtube.com/results?search_query={query.replace(' ', '+')}&sp=EgIQAQ%253D%253D"
    
    print(f"[M√öSICA] Tentando tocar: {query}")
    
    # Verifica se j√° existe um processo Chrome aberto e o fecha
    global chrome_process
    if chrome_process:
        print("[INFO] J√° existe um navegador aberto. Fechando antes de abrir nova m√∫sica...")
        parar_musica()
    
    driver = None 
    # try:
    #     print("[INFO] Tentando abrir YouTube com Google Chrome e clicar no primeiro v√≠deo...")
    #     service = Service("/usr/local/bin/chromedriver-linux64/chromedriver")

    #     # Configura√ß√µes para o Google Chrome
    #     options = Options()
    #     options.add_argument("--user-data-dir=/home/kaizen/chrome-selenium-profile")
    #     options.add_argument("--profile-directory=Default")  # ou "Profile 1", "Profile 2", etc
    #     options.add_experimental_option("excludeSwitches", ["enable-automation"])
    #     options.add_experimental_option('useAutomationExtension', False)
    #     # Outras flags recomendadas
    #     options.add_argument("--no-sandbox")
    #     options.add_argument("--disable-dev-shm-usage")
    #     # --- Definir o binary_location para o Google Chrome ---
    #     # Tenta encontrar o google-chrome no PATH ou no caminho comum
    #     chrome_executable = "/usr/bin/brave-browser"
    #     if not chrome_executable:
    #         if not os.path.exists(chrome_executable):
    #             print(f"[ERRO] Execut√°vel do Google Chrome n√£o encontrado em {chrome_executable} e n√£o est√° no PATH.")
    #             return f"Erro: Google Chrome n√£o encontrado. N√£o foi poss√≠vel tocar '{query}'."

    #     options.binary_location = chrome_executable
    #     print(f"[INFO] Definindo binary_location para: {chrome_executable}")

    #     # Inicializa o Chrome WebDriver
    #     try:
    #         # Use Service() se chromedriver estiver no PATH
    #         # Se n√£o estiver, especifique o caminho: Service(executable_path="/caminho/do/seu/chromedriver")
    #         driver = webdriver.Chrome(service=service, options=options)
    #         print(f"[‚úÖ] WebDriver (Google Chrome) iniciado com sucesso")
    #     except Exception as e:
    #         print(f"[ERRO] N√£o foi poss√≠vel iniciar o WebDriver: {str(e)[:200]}")
    #         raise Exception(f"Falha ao iniciar WebDriver: {str(e)[:100]}")
        
    #     # Abre a p√°gina de busca do YouTube
    #     driver.get(url_search)
    #     print("[INFO] P√°gina de busca do YouTube aberta")
        
    #     # Espera at√© 10 segundos pelos resultados da busca carregarem
    #     wait = WebDriverWait(driver, 10)
        
    #     # Agora vamos focar especificamente no seletor para o elemento id="video-title"
    #     try:
    #         print("[INFO] Aguardando e procurando pelo elemento com id='video-title'...")
            
    #         # Primeiro, esperamos at√© que os resultados carreguem
    #         wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "ytd-video-renderer")))
            
    #         # Especificamente procuramos pelo link com id="video-title"
    #         video_title_selector = "#video-title"
    #         video_element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, video_title_selector)))
            
    #         # Rola a p√°gina at√© o elemento
    #         driver.execute_script("arguments[0].scrollIntoView()", video_element)
    #         time.sleep(1)
            
    #         # Tenta clicar com JavaScript (mais confi√°vel)
    #         driver.execute_script("arguments[0].click();", video_element)
            
    #         # Verifica se o clique funcionou (se estamos na mesma p√°gina, tenta clique normal)
    #         if driver.current_url == url_search:
    #             video_element.click()
                
    #         print(f"[‚úÖ] Clicou no v√≠deo com sucesso usando seletor {video_title_selector}!")
            
    #         # Espera um pouco para o v√≠deo carregar
    #         time.sleep(3)
                
    #         # Agora tenta garantir que o v√≠deo est√° sendo reproduzido
    #         # clicando no bot√£o de play, se necess√°rio
    #         try:
    #             # Seletores para o bot√£o de play no YouTube
    #             play_button_selectors = [
    #                 ".ytp-play-button", # Bot√£o padr√£o de play/pause
    #                 ".ytp-large-play-button", # Bot√£o grande de play que aparece quando v√≠deo est√° parado
    #                 "#movie_player", # Clica no player diretamente
    #                 ".html5-video-container" # Container do v√≠deo
    #             ]
                
    #             for play_selector in play_button_selectors:
    #                 try:
    #                     print(f"[INFO] Tentando clicar no bot√£o play com seletor: {play_selector}")
    #                     play_button = WebDriverWait(driver, 5).until(
    #                         EC.element_to_be_clickable((By.CSS_SELECTOR, play_selector))
    #                     )
    #                     driver.execute_script("arguments[0].click();", play_button)
    #                     print(f"[‚úÖ] Clicou no bot√£o de play!")
    #                     break
    #                 except Exception as e:
    #                     print(f"[INFO] N√£o conseguiu clicar no bot√£o com seletor {play_selector}")
    #                     continue
    #         except Exception as e:
    #             print(f"[INFO] Erro ao tentar clicar no play: {str(e)[:100]}")
    #             print("[INFO] O v√≠deo pode iniciar automaticamente ou pode ser necess√°rio clicar manualmente")
            
    #         # Importante: N√ÉO fechamos o driver para que a m√∫sica continue tocando
    #         print("[‚úÖ] Mantendo o navegador aberto para continuar a reprodu√ß√£o")
            
    #         # A p√°gina do v√≠deo foi aberta e provavelmente est√° tocando
    #         return f"M√∫sica '{query}' est√° sendo reproduzida no YouTube! O navegador permanecer√° aberto para continuar a reprodu√ß√£o."
    #     except Exception as e:
    #         print(f"[INFO] N√£o foi poss√≠vel clicar no elemento com id='video-title': {str(e)[:100]}")
        
    #     # Se chegou aqui e n√£o conseguiu clicar no v√≠deo, fecha o driver e tenta com subprocess
    #     print("[ALERTA] N√£o conseguiu clicar no v√≠deo. Fechando WebDriver.")
    #     try:
    #         driver.quit()
    #     except Exception as e:
    #         print(f"[INFO] Erro ao fechar o driver: {str(e)[:100]}")
    
    # except Exception as e: # Este catch √© para erros do Selenium
    #     print(f"[ERRO] Erro ao usar Selenium: {str(e)[:150]}")
    #     print("[INFO] Tentando m√©todo alternativo com subprocess...")
    
    # --- Parte do subprocess (m√©todo de backup, agora usando Google Chrome) ---
    chrome_subprocess_path = shutil.which("google-chrome")
    if not chrome_subprocess_path:
        chrome_subprocess_path = "/usr/bin/google-chrome" 
        if not os.path.exists(chrome_subprocess_path):
            print(f"[ERRO] Execut√°vel do Google Chrome para subprocess n√£o encontrado em {chrome_subprocess_path} e n√£o est√° no PATH.")
            return f"N√£o foi poss√≠vel abrir um navegador para reproduzir '{query}'. Verifique se o Google Chrome est√° instalado."


    try:
        # Abre o Google Chrome diretamente com a URL de busca
        print(f"[INFO] Tentando abrir {url_search} com {chrome_subprocess_path} via subprocess...")
        process = subprocess.Popen([chrome_subprocess_path, url_search])
        # Armazena o processo atual para poder encerr√°-lo depois
        chrome_process = process
        print(f"[‚úÖ] Sucesso! URL aberta com {chrome_subprocess_path}")
        
        # Pausamos o script por alguns segundos para a p√°gina carregar completamente
        time.sleep(5)
        
        # Tenta usar o PyAutoGUI para clicar no primeiro resultado se dispon√≠vel
        if PYAUTOGUI_AVAILABLE:
            try:
                print("[INFO] Tentando usar PyAutoGUI para clicar no primeiro resultado...")
                
                script_dir = os.path.dirname(os.path.abspath(__file__))
                ref_image = os.path.join(script_dir, "youtube_video_title.png")
                
                if os.path.exists(ref_image):
                    try:
                        print("[INFO] Buscando refer√™ncia visual do t√≠tulo do v√≠deo...")
                        location = pyautogui.locateOnScreen(ref_image, confidence=0.7)
                        if location:
                            center_x, center_y = pyautogui.center(location)
                            pyautogui.click(center_x, center_y)
                            print(f"[‚úÖ] Clicou no primeiro resultado usando refer√™ncia visual!")
                            time.sleep(2)
                            return f"M√∫sica '{query}' est√° sendo reproduzida no YouTube!"
                    except Exception as e:
                        print(f"[INFO] N√£o conseguiu encontrar refer√™ncia visual: {str(e)[:100]}")
                
                print("[INFO] Tentando clicar em posi√ß√£o estimada para o primeiro resultado...")
                pyautogui.click(x=500, y=400)  
                time.sleep(0.5)
                # pyautogui.moveTo(x=500, y=450, duration=0.5)
                pyautogui.click()
                print("[‚úÖ] Tentou clicar no primeiro resultado usando posi√ß√£o estimada")
                
                time.sleep(3)
                
                return f"M√∫sica '{query}' est√° sendo reproduzida no YouTube (via clique autom√°tico)!"
            except Exception as e:
                print(f"[INFO] Erro ao tentar clicar com PyAutoGUI: {str(e)[:100]}")
        
        print("[INFO] Navegador aberto, mas clique manual necess√°rio")
        return f"M√∫sica '{query}' est√° sendo carregada no YouTube. Voc√™ precisa clicar no v√≠deo para reproduzir."
    except FileNotFoundError:
        print(f"[ERRO] Navegador {chrome_subprocess_path} n√£o foi encontrado no sistema")
    except Exception as e:
        print(f"[ERRO] Erro ao tentar abrir {chrome_subprocess_path} com {url_search}: {e}")
            
    try:
        print("[INFO] Tentando abrir com o navegador padr√£o do sistema...")
        import webbrowser
        url_final = f"https://www.youtube.com/results?search_query={query.replace(' ', '+')}"
        webbrowser.open(url_final)
        time.sleep(1)
        return f"M√∫sica '{query}' est√° sendo carregada no navegador padr√£o. Clique no v√≠deo para reproduzir se necess√°rio."
    except Exception as e:
        print(f"[ERRO] Erro ao tentar abrir o navegador padr√£o: {e}")
    
    return f"N√£o foi poss√≠vel abrir um navegador para reproduzir '{query}'. Verifique se o Google Chrome est√° instalado."

# üéôÔ∏è M√≥dulo de reconhecimento de voz
import speech_recognition as sr
import re

def escutar_comando():
    """Escuta o microfone e retorna o texto reconhecido"""
    # Se tivermos interface gr√°fica, atualiza o estado
    global interface
    if interface:
        interface.start_listening()
    
    recognizer = sr.Recognizer()
    
    # Ajusta o recognizer para o ru√≠do ambiente
    with sr.Microphone() as source:
        print("\nüîä Ajustando para ru√≠do ambiente...")
        recognizer.adjust_for_ambient_noise(source, duration=1)
        print("üéß Ouvindo...")
        
        try:
            audio = recognizer.listen(source, timeout=5, phrase_time_limit=5)
            print("üîç Reconhecendo...")
            
            # Atualiza estado da interface
            if interface:
                interface.stop_listening()
                interface.start_thinking()
            
            # Usando o Google Speech Recognition
            texto = recognizer.recognize_google(audio, language="pt-BR")
            print(f"üó£Ô∏è Voc√™ disse: {texto}")
            return texto.lower()
        except sr.WaitTimeoutError:
            if interface:
                interface.stop_listening()
            return ""
        except sr.UnknownValueError:
            if interface:
                interface.stop_listening()
            print("‚ùì N√£o entendi o que voc√™ disse")
            return ""
        except sr.RequestError as e:
            if interface:
                interface.stop_listening()
            print(f"‚ùå Erro na requisi√ß√£o ao servi√ßo de reconhecimento: {e}")
            return ""

def detectar_jarvis(texto):
    """Verifica se o texto cont√©m a palavra de ativa√ß√£o 'Jarvis'"""
    return bool(re.search(r"\bjarvis\b", texto, re.IGNORECASE))

def detectar_comando_parar(texto):
    """Verifica se o texto cont√©m comando para parar a m√∫sica"""
    # Lista de padr√µes que indicam comando para parar
    padroes_parar = [
        r"\bparar\b",  
        r"\bpara\b", 
        r"\bpare\b", 
        r"\bstop\b", 
        r"\bcancela\b",
        r"\bfecha\b", 
        r"\bencerra\b",
        r"\bdesliga\b", 
        r"\bsilencia\b"
    ]
    
    # Lista de palavras de contexto relacionadas a m√∫sica/audio
    contexto_musica = [
        r"\bm√∫sica\b", 
        r"\bsom\b", 
        r"\b√°udio\b", 
        r"\bt√≠tulo\b", 
        r"\bcan√ß√£o\b", 
        r"\byoutube\b", 
        r"\bnavegador\b"
    ]
    
    # Verifica se h√° algum padr√£o de parada
    for padrao in padroes_parar:
        if re.search(padrao, texto, re.IGNORECASE):
            # Se encontrou um padr√£o de parada, verifica se h√° contexto de m√∫sica
            for contexto in contexto_musica:
                if re.search(contexto, texto, re.IGNORECASE):
                    return True
            
            # Mesmo sem o contexto expl√≠cito, assume que √© para parar
            return True
    
    return False

def detectar_comando_pausar(texto):
    """Verifica se o texto cont√©m comando para pausar a m√∫sica"""
    # Lista de padr√µes que indicam comando para pausar
    padroes_pausar = [
        r"\bpausar\b",
        r"\bpausa\b",
        r"\bpause\b",
        r"\besperar\b",
        r"\bespera\b",
        r"\bcongelar\b"
    ]
    
    # Verifica se h√° algum padr√£o de pausa
    for padrao in padroes_pausar:
        if re.search(padrao, texto, re.IGNORECASE):
            return True
    
    return False

def detectar_comando_tocar(texto):
    """Verifica se o texto cont√©m comando para resumir/tocar a m√∫sica"""
    # Lista de padr√µes que indicam comando para resumir/tocar
    padroes_tocar = [
        r"\btocar\b",
        r"\btoca\b",
        r"\bcontinuar\b",
        r"\bcontinua\b",
        r"\bresume\b",
        r"\bresum√≠r\b",
        r"\bresume\b",
        r"\bplay\b",
        r"\bseguir\b"
    ]
    
    # Verifica se h√° algum padr√£o de tocar/resumir
    for padrao in padroes_tocar:
        if re.search(padrao, texto, re.IGNORECASE):
            return True
    
    return False

def extrair_comando_musica(texto):
    """Extrai o comando de m√∫sica do texto"""
    # Padr√µes comuns para pedidos de m√∫sica
    padrao_tocar = r"(tocar|ouvir|escutar|coloca|coloque|p√µe|bota)\s+(a m√∫sica|m√∫sica|a can√ß√£o|can√ß√£o|o som|som)?\s*(.+)"
    
    # Procura padr√µes de pedido de m√∫sica no texto
    match = re.search(padrao_tocar, texto, re.IGNORECASE)
    if match:
        return match.group(3)
    
    # Se n√£o encontrou padr√µes espec√≠ficos, remove apenas o "jarvis" do texto
    return re.sub(r"\bjarvis\b", "", texto, flags=re.IGNORECASE).strip()

def parar_musica():
    """Para a reprodu√ß√£o de m√∫sica fechando o processo do navegador"""
    global chrome_process
    
    if chrome_process:
        print("[INFO] Tentando encerrar o navegador usando subprocess.terminate()")
        try:
            if chrome_process.poll() is None:
                chrome_process.terminate()
                try:
                    chrome_process.wait(timeout=2)
                    print("[INFO] Navegador encerrado com sucesso")
                    chrome_process = None
                    return True
                except subprocess.TimeoutExpired:
                    print("[INFO] Tempo expirado ao tentar encerrar o navegador, usando kill()")
                    chrome_process.kill()
                    chrome_process = None
                    return True
            else:
                print("[INFO] O navegador j√° est√° fechado")
                chrome_process = None
                return False
        except Exception as e:
            print(f"[ERRO] Erro ao tentar encerrar o navegador: {e}")
            chrome_process = None
            return False
    else:
        print("[INFO] N√£o h√° navegador aberto para ser fechado")
        return False

def pausar_musica():
    """Pausa a reprodu√ß√£o de m√∫sica clicando na posi√ß√£o do player"""
    global chrome_process
    
    if chrome_process and chrome_process.poll() is None:
        try:
            # Clica na posi√ß√£o do player para pausar
            print("[INFO] Tentando pausar a m√∫sica com um clique...")
            pyautogui.click(x=400, y=600)
            print("[‚úÖ] Tentativa de pausar a m√∫sica executada")
            return True
        except Exception as e:
            print(f"[ERRO] Erro ao tentar pausar a m√∫sica: {e}")
            return False
    else:
        print("[INFO] N√£o h√° navegador aberto para pausar a m√∫sica")
        return False

def retomar_musica():
    """Retoma a reprodu√ß√£o de m√∫sica clicando na posi√ß√£o do player"""
    global chrome_process
    
    if chrome_process and chrome_process.poll() is None:
        try:
            # Clica na posi√ß√£o do player para retomar
            print("[INFO] Tentando retomar a m√∫sica com um clique...")
            pyautogui.click(x=400, y=600)
            print("[‚úÖ] Tentativa de retomar a m√∫sica executada")
            return True
        except Exception as e:
            print(f"[ERRO] Erro ao tentar retomar a m√∫sica: {e}")
            return False
    else:
        print("[INFO] N√£o h√° navegador aberto para retomar a m√∫sica")
        return False

def processar_comando_voz():
    """Processa o comando de voz e retorna o texto processado ou comandos especiais"""
    texto = escutar_comando()
    
    # Se n√£o reconheceu nenhum texto, retorna vazio
    if not texto:
        return ""
    
    # Verifica se o texto cont√©m a palavra-chave "jarvis"
    if not detectar_jarvis(texto):
        print("‚ùå Comando n√£o come√ßou com 'Jarvis'")
        return ""
    
    # Verifica comandos de controle de m√∫sica
    if detectar_comando_parar(texto):
        parar_musica()
        # Mostra uma express√£o feliz brevemente depois de executar o comando
        global interface
        if interface:
            interface.be_happy(1500)
        return "[COMANDO_EXECUTADO]"  # Sinaliza que o comando foi executado
    
    if detectar_comando_pausar(texto):
        pausar_musica()
        # Mostra uma express√£o feliz brevemente depois de executar o comando
        if interface:
            interface.be_happy(1500)
        return "[COMANDO_EXECUTADO]"  # Sinaliza que o comando foi executado
    
    if detectar_comando_tocar(texto):
        # Verifica se √© comando para retomar m√∫sica atual ou tocar nova m√∫sica
        comando_musica = extrair_comando_musica(texto)
        if comando_musica:
            # Comando para tocar nova m√∫sica
            tocar_musica(comando_musica)
        else:
            # Comando para retomar m√∫sica atual
            retomar_musica()
        
        # Mostra uma express√£o feliz brevemente depois de executar o comando
        if interface:
            interface.be_happy(1500)
            
        return "[COMANDO_EXECUTADO]"  # Sinaliza que o comando foi executado
    
    # Remove a palavra "jarvis" do comando para processamento
    texto = texto.replace("jarvis", "").strip()
    
    return texto  # Retorna o comando para ser processado pelo agente

def modo_voz():
    """Inicia o assistente no modo de comandos por voz."""
    global interface
    print("\nüéôÔ∏è Modo de Voz iniciado - diga 'Jarvis' seguido do seu comando.")
    print("Digite 'sair' para encerrar.")
    
    import pygame
    while True:
        try:
            # Mant√©m a interface responsiva
            if interface:
                pygame.event.pump()
            # Processa o comando de voz
            comando = processar_comando_voz()
            
            # Se n√£o foi reconhecido um comando v√°lido, continua
            if not comando:
                continue
            
            # Se foi um comando espec√≠fico que j√° foi tratado
            if comando == "[COMANDO_EXECUTADO]":
                continue
            
            # Chama o agente com o comando
            print(f"\nü§ñ Processando: '{comando}'")
            
            # Atualiza a interface para mostrar que est√° pensando
            if interface:
                interface.start_thinking()
                pygame.event.pump()
                
            # Processa a resposta
            resposta = agent.run(comando)
            
            # Atualiza a interface para mostrar que est√° respondendo
            if interface:
                interface.start_talking()
                pygame.event.pump()
                
            print(f"\nüß† Jarvis: {resposta}")
            
            # Adiciona um pequeno delay para permitir que a anima√ß√£o de fala seja vista
            time.sleep(len(resposta) * 0.05)  # Tempo proporcional ao tamanho da resposta
            
            # Volta para o estado neutro
            if interface:
                interface.stop_talking()
                pygame.event.pump()
            
        except KeyboardInterrupt:
            print("\nüëã Encerrando o modo de voz...")
            if interface:
                interface.stop()
            return
        except Exception as e:
            print(f"\n‚ùå Erro: {str(e)}")
            if interface:
                interface.stop_talking()

# Configura√ß√£o do agente
tools = [
    Tool(
        name="Pesquisa na Web",
        func=pesquisar_web,
        description="Ferramenta para pesquisar na web por informa√ß√µes"
    ),
    Tool(
        name="Reproduzir M√∫sica",
        func=tocar_musica,
        description="Ferramenta para tocar m√∫sica no YouTube"
    )
]

# Inicializa√ß√£o do agente
agent = initialize_agent(
    tools, 
    llm, 
    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True,
    handle_parsing_errors=True,
    system_message=SystemMessage(content="""Voc√™ √© o Jarvis, um assistente de IA avan√ßado.
    Seu objetivo √© ajudar o usu√°rio com suas tarefas di√°rias, responder perguntas e entretenimento.
    Voc√™ tem acesso a ferramentas para pesquisar na web e reproduzir m√∫sicas no YouTube.""")
)

def modo_texto():
    """Inicia o assistente no modo de comandos por texto."""
    global interface
    print("\n‚å®Ô∏è Modo de Texto iniciado - digite seu comando ou 'sair' para encerrar.")
    
    import pygame
    while True:
        if interface:
            pygame.event.pump()
        comando = input("\nüî§ Digite seu comando: ").strip().lower()
        
        if comando == "sair":
            print("\nüëã Encerrando o modo de texto...")
            if interface:
                interface.stop()
            return
        
        try:
            # Atualiza a interface para mostrar que est√° pensando
            if interface:
                interface.start_thinking()
                pygame.event.pump()
                
            # Processa a resposta
            resposta = agent.run(comando)
            
            # Atualiza a interface para mostrar que est√° respondendo
            if interface:
                interface.start_talking()
                pygame.event.pump()
                
            print(f"\nüß† Jarvis: {resposta}")
            
            # Adiciona um pequeno delay para permitir que a anima√ß√£o de fala seja vista
            time.sleep(len(resposta) * 0.05)  # Tempo proporcional ao tamanho da resposta
            
            # Volta para o estado neutro
            if interface:
                interface.stop_talking()
                pygame.event.pump()
                
        except Exception as e:
            print(f"\n‚ùå Erro: {e}")
            if interface:
                interface.stop_talking()

# Vari√°vel global para a interface gr√°fica
interface = None

# Interface de linha de comando simples
if __name__ == "__main__":
    print("\nü§ñ JARVIS - Assistente Pessoal")
    
    # Inicializa a interface gr√°fica
    try:
        interface = JarvisInterface()
        interface.start()
        print("‚úÖ Interface gr√°fica iniciada.")
    except Exception as e:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel iniciar a interface gr√°fica: {e}")
        interface = None
    
    # Inicia o assistente no modo de voz
    modo_voz()